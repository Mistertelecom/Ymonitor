name: 🚀 Y Monitor CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '18'
  POSTGRES_VERSION: '15'
  REDIS_VERSION: '7'

jobs:
  # 🔍 Code Quality & Security
  quality:
    name: 📊 Code Quality & Security
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: npm ci

      - name: 🧹 Lint Code
        run: npm run lint

      - name: 🎨 Format Check
        run: npm run format -- --check

      - name: 🔍 TypeScript Check
        run: npm run type-check

      - name: 🔒 Security Audit
        run: npm audit --audit-level=high

      - name: 📊 Code Analysis with SonarQube
        uses: sonarqube-quality-gate-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # 🧪 Testing Suite
  test:
    name: 🧪 Test Suite
    runs-on: ubuntu-latest
    needs: quality

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: ymonitor_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: npm ci

      - name: 🗄️ Setup Database
        run: |
          cd apps/api
          npm run db:migrate
          npm run db:generate
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/ymonitor_test

      - name: 🧪 Run Unit Tests
        run: npm run test
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/ymonitor_test
          REDIS_URL: redis://localhost:6379

      - name: 🔧 Run Integration Tests
        run: npm run test:e2e
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/ymonitor_test
          REDIS_URL: redis://localhost:6379

      - name: 📊 Generate Coverage Report
        run: npm run test:coverage
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/ymonitor_test

      - name: 📈 Upload Coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info
          fail_ci_if_error: true

  # 🏗️ Build & Package
  build:
    name: 🏗️ Build & Package
    runs-on: ubuntu-latest
    needs: [quality, test]
    strategy:
      matrix:
        app: [api, web]

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: npm ci

      - name: 🏗️ Build Application
        run: |
          cd apps/${{ matrix.app }}
          npm run build

      - name: 📦 Create Build Artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.app }}-build
          path: apps/${{ matrix.app }}/dist
          retention-days: 7

  # 🐳 Docker Build & Security Scan
  docker:
    name: 🐳 Docker Build & Security
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push'
    strategy:
      matrix:
        app: [api, web]

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🏗️ Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Login to Docker Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 📊 Extract Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}/${{ matrix.app }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 🐳 Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./apps/${{ matrix.app }}/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 🔍 Run Trivy Security Scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ghcr.io/${{ github.repository }}/${{ matrix.app }}:${{ github.sha }}
          format: sarif
          output: trivy-results.sarif

      - name: 📊 Upload Trivy Results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-results.sarif

  # 🚀 Deploy to Staging
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [docker]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment:
      name: staging
      url: https://staging.y-monitor.com

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔐 Setup Kubernetes Config
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > $HOME/.kube/config

      - name: 🚀 Deploy to Staging
        run: |
          # Replace image tags in Kubernetes manifests
          sed -i "s|IMAGE_TAG|${{ github.sha }}|g" k8s/staging/*.yaml
          
          # Apply Kubernetes manifests
          kubectl apply -f k8s/staging/

      - name: ⏳ Wait for Deployment
        run: |
          kubectl rollout status deployment/ymonitor-api-staging -n y-monitor-staging --timeout=300s
          kubectl rollout status deployment/ymonitor-web-staging -n y-monitor-staging --timeout=300s

      - name: 🧪 Run Smoke Tests
        run: |
          # Health check endpoints
          curl -f https://staging-api.y-monitor.com/health || exit 1
          curl -f https://staging.y-monitor.com || exit 1

  # 🌐 Deploy to Production
  deploy-production:
    name: 🌐 Deploy to Production
    runs-on: ubuntu-latest
    needs: [docker]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: production
      url: https://y-monitor.com

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔐 Setup Kubernetes Config
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > $HOME/.kube/config

      - name: 🚀 Deploy to Production
        run: |
          # Replace image tags in Kubernetes manifests
          sed -i "s|IMAGE_TAG|${{ github.sha }}|g" k8s/production/*.yaml
          
          # Apply Kubernetes manifests with rolling update
          kubectl apply -f k8s/production/

      - name: ⏳ Wait for Deployment
        run: |
          kubectl rollout status deployment/ymonitor-api -n y-monitor --timeout=600s
          kubectl rollout status deployment/ymonitor-web -n y-monitor --timeout=600s

      - name: 🧪 Run Production Health Checks
        run: |
          # Health check endpoints
          curl -f https://api.y-monitor.com/health || exit 1
          curl -f https://y-monitor.com || exit 1

      - name: 📊 Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release v${{ github.run_number }}
          body: |
            🚀 Y Monitor Release v${{ github.run_number }}
            
            ## Changes
            ${{ github.event.head_commit.message }}
            
            ## Docker Images
            - API: `ghcr.io/${{ github.repository }}/api:${{ github.sha }}`
            - Web: `ghcr.io/${{ github.repository }}/web:${{ github.sha }}`
          draft: false
          prerelease: false

  # 📊 Performance Testing
  performance:
    name: 📊 Performance Testing
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/develop'

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🚀 Run Load Tests
        run: |
          # Install k6
          sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6
          
          # Run performance tests
          k6 run --out json=performance-results.json tests/performance/load-test.js

      - name: 📊 Upload Performance Results
        uses: actions/upload-artifact@v3
        with:
          name: performance-results
          path: performance-results.json

  # 🔔 Notifications
  notify:
    name: 🔔 Notifications
    runs-on: ubuntu-latest
    needs: [deploy-production, deploy-staging]
    if: always()

    steps:
      - name: 📬 Slack Notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#y-monitor-deployments'
          fields: repo,message,commit,author,action,eventName,ref,workflow
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: 📧 Email Notification
        if: failure()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: '🚨 Y Monitor Deployment Failed'
          body: |
            Deployment failed for Y Monitor
            
            Branch: ${{ github.ref }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
            
            Please check the GitHub Actions logs for details.
          to: ${{ secrets.NOTIFICATION_EMAIL }}
          from: Y Monitor CI/CD <${{ secrets.EMAIL_USERNAME }}>