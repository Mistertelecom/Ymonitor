name: Automated Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test-api:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test
          POSTGRES_USER: test
          POSTGRES_DB: ymonitor_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
          
      influxdb:
        image: influxdb:2.7
        env:
          DOCKER_INFLUXDB_INIT_MODE: setup
          DOCKER_INFLUXDB_INIT_USERNAME: test
          DOCKER_INFLUXDB_INIT_PASSWORD: testpassword
          DOCKER_INFLUXDB_INIT_ORG: test-org
          DOCKER_INFLUXDB_INIT_BUCKET: test-bucket
          DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: test-token
        ports:
          - 8086:8086

    defaults:
      run:
        working-directory: ./apps/api

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: ./apps/api/package-lock.json

    - name: Install dependencies
      run: npm ci

    - name: Create test environment file
      run: |
        cat > .env.test << EOF
        DATABASE_URL="postgresql://test:test@localhost:5432/ymonitor_test?schema=public"
        JWT_SECRET="test-jwt-secret-key-for-testing-only"
        JWT_EXPIRES_IN="7d"
        REDIS_HOST="localhost"
        REDIS_PORT=6379
        INFLUXDB_URL="http://localhost:8086"
        INFLUXDB_TOKEN="test-token"
        INFLUXDB_ORG="test-org"
        INFLUXDB_BUCKET="test-bucket"
        NODE_ENV="test"
        DISABLE_EXTERNAL_SERVICES=true
        MOCK_SNMP_RESPONSES=true
        MOCK_INFLUXDB=true
        LOG_LEVEL="error"
        EOF

    - name: Generate Prisma Client
      run: npm run db:generate

    - name: Run database migrations
      run: npm run db:deploy

    - name: Run unit tests
      run: npm run test:unit

    - name: Run integration tests
      run: npm run test:e2e

    - name: Generate test coverage
      run: npm run test:cov

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./apps/api/coverage/lcov.info
        flags: api
        name: api-coverage

  test-frontend:
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ./apps/web

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: ./apps/web/package-lock.json

    - name: Install dependencies
      run: npm ci

    - name: Run linting
      run: npm run lint

    - name: Run type checking
      run: npm run type-check

    - name: Run unit tests
      run: npm run test

    - name: Build application
      run: npm run build

  lint-and-format:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: ./apps/api/package-lock.json

    - name: Install API dependencies
      run: cd apps/api && npm ci

    - name: Run API linting
      run: cd apps/api && npm run lint

    - name: Run API formatting check
      run: cd apps/api && npm run format

    - name: Install Web dependencies
      run: cd apps/web && npm ci

    - name: Run Web linting
      run: cd apps/web && npm run lint

  security-audit:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Run security audit for API
      run: cd apps/api && npm audit --audit-level=high

    - name: Run security audit for Web
      run: cd apps/web && npm audit --audit-level=high

  docker-build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Build API Docker image
      run: docker build -f docker/Dockerfile.api -t y-monitor/api:test .

    - name: Build Web Docker image
      run: docker build -f docker/Dockerfile.web -t y-monitor/web:test .

    - name: Test API container startup
      run: |
        docker run --rm -d --name test-api \
          -e DATABASE_URL="postgresql://test:test@localhost:5432/test" \
          -e JWT_SECRET="test-secret" \
          -p 3001:3001 \
          y-monitor/api:test
        sleep 10
        docker logs test-api
        docker stop test-api

  performance-test:
    runs-on: ubuntu-latest
    needs: test-api
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test
          POSTGRES_USER: test
          POSTGRES_DB: ymonitor_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    defaults:
      run:
        working-directory: ./apps/api

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: ./apps/api/package-lock.json

    - name: Install dependencies
      run: npm ci

    - name: Setup database
      run: |
        npm run db:generate
        npm run db:deploy

    - name: Start API server
      run: |
        npm run start:prod &
        sleep 15
      env:
        DATABASE_URL: "postgresql://test:test@localhost:5432/ymonitor_test?schema=public"
        JWT_SECRET: "test-secret"
        NODE_ENV: "production"

    - name: Install Artillery
      run: npm install -g artillery@latest

    - name: Run performance tests
      run: |
        cat > performance-test.yml << EOF
        config:
          target: 'http://localhost:3000'
          phases:
            - duration: 60
              arrivalRate: 10
        scenarios:
          - name: Health check
            requests:
              - get:
                  url: "/health"
        EOF
        artillery run performance-test.yml

  notify:
    runs-on: ubuntu-latest
    needs: [test-api, test-frontend, lint-and-format, security-audit, docker-build]
    if: always()
    
    steps:
    - name: Notify success
      if: ${{ needs.test-api.result == 'success' && needs.test-frontend.result == 'success' }}
      run: echo "✅ All tests passed successfully!"
      
    - name: Notify failure
      if: ${{ needs.test-api.result == 'failure' || needs.test-frontend.result == 'failure' }}
      run: |
        echo "❌ Tests failed!"
        exit 1