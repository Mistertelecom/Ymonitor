#!/bin/bash

# Y-Monitor Production Startup Script
# Este script inicia o projeto Y-Monitor em modo produ√ß√£o

echo "üöÄ Iniciando Y-Monitor em modo produ√ß√£o..."
echo "========================================="

# Verificar se o Node.js est√° instalado
if ! command -v node &> /dev/null; then
    echo "‚ùå Node.js n√£o est√° instalado. Por favor, instale o Node.js 18+ antes de continuar."
    exit 1
fi

# Verificar se o npm est√° instalado
if ! command -v npm &> /dev/null; then
    echo "‚ùå npm n√£o est√° instalado. Por favor, instale o npm antes de continuar."
    exit 1
fi

# Verificar vers√£o do Node.js
NODE_VERSION=$(node --version | cut -d'v' -f2 | cut -d'.' -f1)
if [ "$NODE_VERSION" -lt 18 ]; then
    echo "‚ùå Node.js vers√£o 18 ou superior √© necess√°ria. Vers√£o atual: $(node --version)"
    exit 1
fi

echo "‚úÖ Node.js $(node --version) encontrado"
echo "‚úÖ npm $(npm --version) encontrado"

# Verificar se existe package.json
if [ ! -f "package.json" ]; then
    echo "‚ùå package.json n√£o encontrado. Certifique-se de estar no diret√≥rio raiz do projeto."
    exit 1
fi

# Verificar se existe turbo.json
if [ ! -f "turbo.json" ]; then
    echo "‚ùå turbo.json n√£o encontrado. Este projeto requer Turbo."
    exit 1
fi

# Instalar depend√™ncias se node_modules n√£o existir
if [ ! -d "node_modules" ]; then
    echo "üì¶ Instalando depend√™ncias..."
    npm ci --only=production
    if [ $? -ne 0 ]; then
        echo "‚ùå Erro ao instalar depend√™ncias."
        exit 1
    fi
    echo "‚úÖ Depend√™ncias instaladas com sucesso"
fi

# Verificar se os builds existem
if [ ! -d "apps/web/.next" ] || [ ! -d "apps/api/dist" ]; then
    echo "üì¶ Compilando projeto..."
    npm run build
    if [ $? -ne 0 ]; then
        echo "‚ùå Erro ao compilar projeto."
        exit 1
    fi
    echo "‚úÖ Projeto compilado com sucesso"
fi

# Criar diret√≥rio de logs se n√£o existir
mkdir -p apps/api/logs

# Verificar vari√°veis de ambiente obrigat√≥rias
echo "üîç Verificando vari√°veis de ambiente..."

ENV_FILE=""
if [ -f ".env" ]; then
    ENV_FILE=".env"
elif [ -f "apps/api/.env" ]; then
    ENV_FILE="apps/api/.env"
fi

if [ -z "$ENV_FILE" ]; then
    echo "‚ùå Arquivo .env n√£o encontrado. Configure as vari√°veis de ambiente antes de continuar."
    echo "   Vari√°veis obrigat√≥rias:"
    echo "   - DATABASE_URL"
    echo "   - JWT_SECRET"
    echo "   - NODE_ENV=production"
    echo "   - PORT=3006"
    echo "   - CORS_ORIGIN=http://localhost:3005"
    exit 1
fi

# Verificar se DATABASE_URL est√° configurada
if [ -z "$DATABASE_URL" ]; then
    echo "‚ùå DATABASE_URL n√£o configurada. Configure a conex√£o com o banco de dados."
    exit 1
fi

# Verificar se JWT_SECRET est√° configurada
if [ -z "$JWT_SECRET" ]; then
    echo "‚ùå JWT_SECRET n√£o configurada. Configure uma chave secreta para JWT."
    exit 1
fi

echo "‚úÖ Vari√°veis de ambiente verificadas"

# Executar migra√ß√µes do banco de dados
if [ -f "apps/api/prisma/schema.prisma" ]; then
    echo "üìä Executando migra√ß√µes do banco de dados..."
    cd apps/api
    npx prisma migrate deploy
    if [ $? -ne 0 ]; then
        echo "‚ùå Erro ao executar migra√ß√µes do banco de dados."
        exit 1
    fi
    echo "‚úÖ Migra√ß√µes executadas com sucesso"
    cd ../..
fi

echo ""
echo "üéØ Configura√ß√£o das portas:"
echo "   - Web: http://localhost:3005"
echo "   - API: http://localhost:3006"
echo "   - Documenta√ß√£o: http://localhost:3006/api"
echo ""

# Fun√ß√£o para parar os servi√ßos
stop_services() {
    echo ""
    echo "üõë Parando servi√ßos..."
    pkill -f "node.*api/dist/main"
    pkill -f "next start"
    exit 0
}

# Capturar Ctrl+C
trap stop_services SIGINT

echo "üöÄ Iniciando servi√ßos em modo produ√ß√£o..."
echo "   - Pressione Ctrl+C para parar os servi√ßos"
echo ""

# Iniciar API em background
cd apps/api
NODE_ENV=production npm run start:prod &
API_PID=$!
cd ../..

# Aguardar um pouco para a API iniciar
sleep 3

# Iniciar Web em background
cd apps/web
NODE_ENV=production npm run start &
WEB_PID=$!
cd ..

echo "‚úÖ Servi√ßos iniciados!"
echo "   - API PID: $API_PID"
echo "   - Web PID: $WEB_PID"
echo ""
echo "üì± Acesse a aplica√ß√£o em: http://localhost:3005"
echo "üìö Documenta√ß√£o da API: http://localhost:3006/api"
echo ""

# Aguardar os processos
wait $API_PID $WEB_PID